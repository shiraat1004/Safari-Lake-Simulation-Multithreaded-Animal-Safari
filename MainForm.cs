using System;
using System.Drawing;
using System.Threading; // Added for Thread
using System.Windows.Forms;
using System.Collections.Generic; // Keep for potential future use (List)
using System.Linq; // Keep for potential future use (Linq)
using System.IO; // Added for MemoryStream in GetAnimalImage

namespace Safari
{
    public partial class MainForm : Form
    {
        public volatile bool isClosing = false;

        private Lake lakeA;
        private Lake lakeB;
        private Lake lakeC;

        // Timer for continuous animal creation
        private System.Windows.Forms.Timer _animalCreationTimer;
        private Random _animalTypeRandom = new Random(); // Random for choosing animal type
        private Random _lakeAssignmentRandom = new Random(); // Random for assigning lake

        public MainForm()
        {
            InitializeComponent(); // This method is generated by the designer and initializes your UI controls.
            InitializeSafari(); // Custom initialization for our simulation logic.
            this.Text = "Safari Simulation"; // Sets the window title.
        }

        private void InitializeSafari()
        {
            // Initialize Lake objects, passing the correct Panel references from the designer.
            // MAKE SURE THE PANEL NAMES IN YOUR DESIGNER MATCH EXACTLY:
            // panelLakeA, panelQueueA, panelLakeB, panelQueueB, panelLakeC, panelQueueC
            lakeA = new Lake(5, panelLakeA, panelQueueA, this);
            lakeB = new Lake(7, panelLakeB, panelQueueB, this);
            lakeC = new Lake(10, panelLakeC, panelQueueC, this);

            // Initialize the animal creation timer
            _animalCreationTimer = new System.Windows.Forms.Timer();
            _animalCreationTimer.Interval = 2000; // Create an animal every 2 seconds (adjust as desired)
            _animalCreationTimer.Tick += AnimalCreationTimer_Tick; // Connect the Tick event
            _animalCreationTimer.Start(); // Start the timer automatically when the form loads

            // Handle form closing to stop the timer and prevent issues
            this.FormClosing += MainForm_FormClosing;
        }

        // Event handler for the timer: creates a new random animal
        private void AnimalCreationTimer_Tick(object sender, EventArgs e)
        {
            CreateRandomAnimal();
        }

        // Method to create a random animal type
        public void CreateRandomAnimal()
        {
            // Adjust probabilities as desired (e.g., 50% Flamingo, 30% Zebra, 20% Hippo)
            int chance = _animalTypeRandom.Next(100); // Number between 0 and 99

            Animal newAnimal;
            if (chance < 33) // 0-49 (50% Flamingo)
            {
                newAnimal = new Flamingo();
            }
            else if (chance < 66) // 50-79 (30% Zebra)
            {
                newAnimal = new Zebra();
            }
            else // 80-99 (20% Hippo)
            {
                newAnimal = new Hippo();
            }

            // Start the animal's lifecycle on a new thread
            // This thread will handle the animal's journey to the lake, drinking, and leaving.
            Thread animalThread = new Thread(() => CreateAndStartAnimal(newAnimal));
            animalThread.IsBackground = true; // Ensures thread terminates when application exits
            animalThread.Start();
        }

        // This method prepares the animal and its PictureBox, then starts its lifecycle.
        // It's called by CreateRandomAnimal on a new thread.
        public void CreateAndStartAnimal(Animal animal)
        {

            Lake selectedLake = GetRandomLake();
            animal.TargetLake = selectedLake;

            // צור PictureBox רק אם לא סוגרים את הטופס
            if (isClosing || selectedLake == null || selectedLake.panelLake == null || selectedLake.panelLake.IsDisposed)
                return;
            this.Invoke((MethodInvoker)delegate
            {

                PictureBox pb = new PictureBox
                {
                    Size = animal.Size,
                    Image = GetAnimalImage(animal.Type),
                    SizeMode = PictureBoxSizeMode.Zoom,
                    BackColor = Color.Transparent
                };
                animal.AnimalPictureBox = pb; // Assign it here
                this.Controls.Add(pb); // Initially add to MainForm controls (will be moved by Lake)
                pb.BringToFront();
            });
            // צור את החיה ב-UI Thread


            // הפעל את מחזור החיים של החיה
            animal.StartLifeCycle();
        }

        private Lake GetRandomLake()
        {
            int chance = _lakeAssignmentRandom.Next(100); // Number between 0 and 99

            if (chance < 33)
            {
                return lakeA;
            }
            else if (chance < 66) // 50-79 (30% Zebra)
            {
                return lakeB;
            }
            else // 80-99 (20% Hippo)
            {
                return lakeC;
            }
        }


        // Helper method to retrieve the correct animal image from the project's resources.
        public Image GetAnimalImage(string animalType)
        {
            byte[] imageData = null;

            switch (animalType)
            {
                case "F": imageData = Properties.Resources.flamingo; break;
                case "Z": imageData = Properties.Resources.zebra; break;
                case "H": imageData = Properties.Resources.hippo; break;
                case "sun": imageData = Properties.Resources.sun; break; // For the sun PictureBox
                case "background": imageData = Properties.Resources.background; break; // For the form background image
                default: return null;
            }

            if (imageData != null)
            {
                using (System.IO.MemoryStream ms = new System.IO.MemoryStream(imageData))
                {
                    return Image.FromStream(ms);
                }
            }
            return null;
        }

        // Event handler for when the form is closing: stops the timer
        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            isClosing = true;

            if (_animalCreationTimer != null)
            {
                _animalCreationTimer.Stop();
                _animalCreationTimer.Dispose();
            }
        }

        private void MainForm_Load(object sender, EventArgs e)
        {

        }
    }
}